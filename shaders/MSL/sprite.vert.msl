#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct SpriteInstanceData
{
    float4 Position;
    float4 UV;
    float4 color;
};

struct type_StructuredBuffer_SpriteInstanceData
{
    SpriteInstanceData _m0[1];
};

struct main0_out
{
    float2 out_var_TEXCOORD0 [[user(locn0)]];
    float4 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float3 in_var_TEXCOORD0 [[attribute(0)]];
    float2 in_var_TEXCOORD1 [[attribute(1)]];
};

vertex main0_out main0(main0_in in [[stage_in]], const device type_StructuredBuffer_SpriteInstanceData& instanceData [[buffer(0)]], uint gl_InstanceIndex [[instance_id]])
{
    main0_out out = {};
    out.out_var_TEXCOORD0 = float2((in.in_var_TEXCOORD1.x * (instanceData._m0[gl_InstanceIndex].UV.z - instanceData._m0[gl_InstanceIndex].UV.x)) + instanceData._m0[gl_InstanceIndex].UV.x, (in.in_var_TEXCOORD1.y * (instanceData._m0[gl_InstanceIndex].UV.w - instanceData._m0[gl_InstanceIndex].UV.y)) + instanceData._m0[gl_InstanceIndex].UV.y);
    out.out_var_TEXCOORD1 = instanceData._m0[gl_InstanceIndex].color;
    out.gl_Position = float4((in.in_var_TEXCOORD0.x * instanceData._m0[gl_InstanceIndex].Position.z) + instanceData._m0[gl_InstanceIndex].Position.x, (in.in_var_TEXCOORD0.y * instanceData._m0[gl_InstanceIndex].Position.w) + instanceData._m0[gl_InstanceIndex].Position.y, 0.0, 1.0);
    return out;
}

